name: R build

on:
  workflow_call

jobs:
  build:

    runs-on: ubuntu-22.04
    strategy:
      fail-fast: true
      matrix:
        spark: [3.3.0]
        scala: [2.12.15]
        r: [release]

    env:
      SPARK_VERSION: ${{ matrix.spark }}
      SCALA_VERSION: ${{ matrix.scala }}
      # Ensure the temporary auth token for this workflow, instead of the
      # bundled GitHub PAT from the `remotes` package is used for
      # `remotes::install_github()`
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Delete existing R binaries
        run: |
          for b in R Rscript
          do
            while [ -n "$(which "$b")" ]
            do
              sudo rm -v "$(which "$b")"
            done
          done
        shell: bash
      - name: Delete existing JDK installation(s)
        run: |
          sudo apt-get -y remove --purge default-jdk adoptopenjdk-11-hotspot || :
        shell: bash
      - uses: actions/checkout@v3
      - uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true
          r-version: ${{ matrix.r }}
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: 'maven'
      - name: Query R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache: true
          extra-packages: |
            any::testthat
            any::rcmdcheck
          working-directory : './R'
      - name: Get OS name
        id: os-name
        run: |
          # `os_name` will be like "Ubuntu-20.04.1-LTS"
          OS_NAME=$(lsb_release -ds | sed 's/\s/-/g')
          echo "os-name=$OS_NAME" >> $GITHUB_OUTPUT
      - name: Cache Spark installations
        if: runner.os != 'Windows'
        uses: actions/cache@master
        with:
          path: ~/spark
          key: apache.sedona-apache-spark-${{ steps.os-name.outputs.os-name }}-${{ env.SPARK_VERSION }}
      - name: Get Sedona libraries
        uses: actions/download-artifact@v3
        with: 
          name: generated-jars
          path: jars
      - name: List 
        run: |
          ls jars
      - name: Build R package
        env:
          WARNINGS_ARE_ERRORS: 1
        run: R CMD build --no-build-vignettes ./R
      - name: Check
        env:
          _R_CHECK_FORCE_SUGGESTS_: false
          WARNINGS_ARE_ERRORS: 1
        run: |
          R CMD check --no-build-vignettes --no-manual --no-tests apache.sedona*.tar.gz
          rm -f apache.sedona*.tar.gz
      - name: Install apache.sedona from source
        run: Rscript -e 'install.packages("./R/", repos = NULL, type = "source")'
      - name: Run tests
        run: |
          export SPARKLYR_LOG_FILE='/tmp/sparklyr.log'
          export SEDONA_JAR_FILES="jars/sedona-spark-shaded-3.0_2.12-1.4.0-SNAPSHOT.jar:jars/sedona-viz-3.0_2.12-1.4.0-SNAPSHOT.jar"
          echo "Apache Sedona jar files: ${SEDONA_JAR_FILES}"
          cd ./R/tests
          NOT_CRAN='true' Rscript testthat.R
        shell: bash
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: Worker logs
          path: /tmp/sparklyr.log
      - name: Dump worker logs on failure
        if: failure()
        run: cat /tmp/sparklyr.log
